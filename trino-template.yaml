---
# Source: trino/templates/netpols.yaml
# TODO: I didn't move these into the Trino chart yet.
#       They should be added to the chart instead of
#       deployed directly.

# TODO: Make sure netpols are in place for Hive as well
#       (It's in a different namespace.)
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: default-deny
  namespace: trino-system
spec:
  podSelector: {}
  policyTypes:
    - Ingress
    - Egress
---
# Source: trino/templates/netpols.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-same-namespace
  namespace: trino-system
spec:
  podSelector: {}
  policyTypes:
    - Ingress
    - Egress
  egress:
  - to:
    - podSelector: {}
  ingress:
  - from:
    - podSelector: {}
---
# Source: trino/templates/netpols.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: coordinator-ingress-allow
  namespace: trino-system
spec:
  podSelector:
    matchLabels:
      component: coordinator
  policyTypes:
    - Ingress
  ingress:
    - {}
---
# Source: trino/templates/netpols.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: egress-hive-allow
  namespace: trino-system
spec:
  podSelector: {}
  policyTypes:
    - Egress
  egress:
    - to:
        - namespaceSelector:
            matchLabels:
              kubernetes.io/metadata.name: hive-system
---
# Source: trino/templates/netpols.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: egress-datasources-allow
  namespace: trino-system
spec:
  podSelector: {}
  policyTypes:
    - Egress
  egress:
    # TODO: Replace this with CIDRs of StatCan networks.
    - to:
        - namespaceSelector:
            matchLabels:
              kubernetes.io/metadata.name: postgresql-datasource
    - to:
        - namespaceSelector:
            matchLabels:
              kubernetes.io/metadata.name: minio-system
---
# Source: trino/templates/netpols.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: dns-allow
  namespace: trino-system
spec:
  egress:
    - ports:
        - port: 53
          protocol: UDP
        - port: 53
          protocol: TCP
      to:
        - namespaceSelector:
            matchLabels:
              kubernetes.io/metadata.name: kube-system
          podSelector:
            matchLabels:
              k8s-app: kube-dns
  podSelector: {}
  policyTypes:
    - Egress
---
# Source: trino/templates/netpols.yaml
# NOTE: This policy is not necessary in real cluster if:
#   * The namespace has any of the following labels:
#     * namespace.statcan.gc.ca/purpose: system
#     * namespace.statcan.gc.ca/purpose: daaas
#   * The pod has the following label:
#     * network.statcan.gc.ca/allow-kube-apiserver: true
#
# In these cases, the necessary network policy is generated by the
# namespace-controller.
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: kube-apiserver-allow
  namespace: trino-system
spec:
  podSelector: {}
  policyTypes:
    - Egress
  egress:
    - to:
        - ipBlock:
            cidr: 192.168.0.19/32
      ports:
        - port: 6443
          protocol: TCP
---
# Source: trino/templates/configmap-catalog.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-trino-catalog
  labels:
    app: trino
    chart: trino-0.5.0
    release: release-name
    heritage: Helm
    role: catalogs
data:
  tpch.properties: |
    connector.name=tpch
    tpch.splits-per-node=4
  tpcds.properties: |
    connector.name=tpcds
    tpcds.splits-per-node=4
  minio.properties: |
    connector.name=hive-hadoop2
    hive.metastore.uri=thrift://hive-metastore.hive-system:9083
    hive.s3.path-style-access=true
    hive.s3.endpoint=http://minio.minio-system:9000
    hive.s3.aws-access-key=trino
    hive.s3.aws-secret-key=Q1zx10EMuU21aEgAZm4kJm9DrD0EjjzIYE8y01Ea
    hive.non-managed-table-writes-enabled=true
    hive.s3select-pushdown.enabled=true
    hive.storage-format=ORC
    
  postgresql.properties: |
    connector.name=postgresql
    connection-url=jdbc:postgresql://postgresql-datasource.postgresql-datasource:5432/autos
    connection-user=trino
    connection-password=Q1zx10EMuU21aEgAZm4kJm9DrD0EjjzIYE8y01Ea
---
# Source: trino/templates/configmap-coordinator.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-trino-coordinator
  labels:
    app: trino
    chart: trino-0.5.0
    release: release-name
    heritage: Helm
    component: coordinator
data:
  node.properties: |
    node.environment=production
    node.data-dir=/data/trino
    plugin.dir=/usr/lib/trino/plugin

  jvm.config: |
    -server
    -Xmx1G
    -XX:+UseG1GC
    -XX:G1HeapRegionSize=32M
    -XX:+UseGCOverheadLimit
    -XX:+ExplicitGCInvokesConcurrent
    -XX:+HeapDumpOnOutOfMemoryError
    -XX:+ExitOnOutOfMemoryError
    -Djdk.attach.allowAttachSelf=true
    -XX:-UseBiasedLocking
    -XX:ReservedCodeCacheSize=512M
    -XX:PerMethodRecompilationCutoff=10000
    -XX:PerBytecodeRecompilationCutoff=10000
    -Djdk.nio.maxCachedBufferSize=2000000

  config.properties: |
    coordinator=true
    node-scheduler.include-coordinator=false
    http-server.http.port=8080
    query.max-memory=512MB
    query.max-memory-per-node=128MB
    memory.heap-headroom-per-node=1GB
    discovery-server.enabled=true
    discovery.uri=http://localhost:8080
      

  exchange-manager.properties: |
    exchange-manager.name=filesystem
    exchange.base-directory=/tmp/trino-local-file-system-exchange-manager

  log.properties: |
    io.trino=INFO
---
# Source: trino/templates/configmap-nginx-conf.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-conf
  namespace: trino-system
data:
  nginx.conf.tmpl: |
    worker_processes auto;

    # Use directory writable by non-root user.
    pid /tmp/nginx.pid;

    # Log to /dev/std*: leave disk alone 
    error_log stderr;

    events {
      # Reduce from default (1024): the sidecare is for a single coordinator.
      worker_connections 16;
    }

    http {
      # Use directory writable by non-root user.
      proxy_temp_path /tmp/proxy_temp;
      client_body_temp_path /tmp/client_temp;
      fastcgi_temp_path /tmp/fastcgi_temp;
      uwsgi_temp_path /tmp/uwsgi_temp;
      scgi_temp_path /tmp/scgi_temp;

      log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

      access_log stdout main;

      keepalive_timeout 65;

      # Authenticate upstream server, trusting the Kubernetes CA.
      proxy_ssl_verify on;
      proxy_ssl_trusted_certificate '/run/secrets/kubernetes.io/serviceaccount/ca.crt';

      server {
        listen 8090;

        # Proxy JWKS GET requests (only) to the Kubernetes API server.
        location /openid/v1/jwks {
          limit_except GET {
            deny all;
          }
          proxy_pass 'https://kubernetes.default.svc/openid/v1/jwks';

          # Authenticate using the JWT from the environment â€“ which should be
          # the container-mounted service account JWT.
          proxy_set_header Authorization 'Bearer $JWT';
        }
      }
    }
---
# Source: trino/templates/configmap-nginx-init.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-init
  namespace: trino-system
data:
  envsubst-conf.sh: |
    #id; echo; cat /etc/passwd; ls -l /etc/nginx;
    VARS='$KUBERNETES_SERVICE_HOST $KUBERNETES_SERVICE_PORT_HTTPS $JWT'
    export JWT=$(cat /run/secrets/kubernetes.io/serviceaccount/token)
    envsubst "$VARS" < /etc/nginx/nginx.conf.tmpl > /etc/nginx/nginx.conf
---
# Source: trino/templates/configmap-worker.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-trino-worker
  labels:
    app: trino
    chart: trino-0.5.0
    release: release-name
    heritage: Helm
    component: worker
data:
  node.properties: |
    node.environment=production
    node.data-dir=/data/trino
    plugin.dir=/usr/lib/trino/plugin

  jvm.config: |
    -server
    -Xmx1G
    -XX:+UseG1GC
    -XX:G1HeapRegionSize=32M
    -XX:+UseGCOverheadLimit
    -XX:+ExplicitGCInvokesConcurrent
    -XX:+HeapDumpOnOutOfMemoryError
    -XX:+ExitOnOutOfMemoryError
    -Djdk.attach.allowAttachSelf=true
    -XX:-UseBiasedLocking
    -XX:ReservedCodeCacheSize=512M
    -XX:PerMethodRecompilationCutoff=10000
    -XX:PerBytecodeRecompilationCutoff=10000
    -Djdk.nio.maxCachedBufferSize=2000000

  config.properties: |
    coordinator=false
    http-server.http.port=8080
    query.max-memory=512MB
    query.max-memory-per-node=128MB
    memory.heap-headroom-per-node=1GB
    discovery.uri=http://release-name-trino:8080
      

  exchange-manager.properties: |
    exchange-manager.name=filesystem
    exchange.base-directory=/tmp/trino-local-file-system-exchange-manager

  log.properties: |
    io.trino=INFO
---
# Source: trino/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-trino
  labels:
    app: trino
    chart: trino-0.5.0
    release: release-name
    heritage: Helm
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app: trino
    release: release-name
    component: coordinator
---
# Source: trino/templates/deployment-coordinator.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-trino-coordinator
  labels:
    app: trino
    chart: trino-0.5.0
    release: release-name
    heritage: Helm
    component: coordinator
spec:
  selector:
    matchLabels:
      app: trino
      release: release-name
      component: coordinator
  template:
    metadata:
      labels:
        app: trino
        release: release-name
        component: coordinator
    spec:
      serviceAccountName: default
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
      volumes:
        - name: config-volume
          configMap:
            name: release-name-trino-coordinator
        - name: catalog-volume
          configMap:
            name: release-name-trino-catalog
        - name: nginx-conf
          configMap:
            name: nginx-conf
        - name: nginx-init
          configMap:
            name: nginx-init
            defaultMode: 0755
      imagePullSecrets:
        - name: registry-credentials
      containers:
        - name: trino-coordinator
          image: "trinodb/trino:latest"
          imagePullPolicy: IfNotPresent
          env:
            []
          volumeMounts:
            - mountPath: /etc/trino
              name: config-volume
            - mountPath: /etc/trino/catalog
              name: catalog-volume
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /v1/info
              port: http
          readinessProbe:
            httpGet:
              path: /v1/info
              port: http
          resources:
            {}
        - name: trino-jwks-client
          image: nginxinc/nginx-unprivileged:1.20-alpine
          securityContext:
            runAsUser: 101
          resources:
            limits:
              memory: "128Mi"
              cpu: "100m"
          ports:
            - containerPort: 8090
          volumeMounts:
            - name: nginx-conf
              mountPath: /etc/nginx/nginx.conf.tmpl
              subPath: nginx.conf.tmpl
              readOnly: true
            - name: nginx-init
              mountPath: /docker-entrypoint.d/envsubst-conf.sh
              subPath: envsubst-conf.sh
              readOnly: true
---
# Source: trino/templates/deployment-worker.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-trino-worker
  labels:
    app: trino
    chart: trino-0.5.0
    release: release-name
    heritage: Helm
    component: worker
spec:
  replicas: 2
  selector:
    matchLabels:
      app: trino
      release: release-name
      component: worker
  template:
    metadata:
      labels:
        app: trino
        release: release-name
        component: worker
    spec:
      serviceAccountName: default
      volumes:
        - name: config-volume
          configMap:
            name: release-name-trino-worker
        - name: catalog-volume
          configMap:
            name: release-name-trino-catalog
      imagePullSecrets:
        - name: registry-credentials
      containers:
        - name: trino-worker
          image: "trinodb/trino:latest"
          imagePullPolicy: IfNotPresent
          env:
            []
          volumeMounts:
            - mountPath: /etc/trino
              name: config-volume
            - mountPath: /etc/trino/catalog
              name: catalog-volume
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /v1/info
              port: http
          readinessProbe:
            httpGet:
              path: /v1/info
              port: http
          resources:
            {}
